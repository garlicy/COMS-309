package com.ccd.app;


import java.util.List;
import com.ccd.app.model.GameData;
import com.ccd.app.model.GameDataModel;
import com.ccd.app.model.Phases;
import com.ccd.app.model.PhasesModel;

import org.springframework.beans.factory.annotation.Autowired;

//import org.springframework.ui.Model;
//import org.springframework.validation.BindingResult;
//import org.springframework.web.bind.annotation.*;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
//import org.springframework.security.core.userdetails.UserDetails;
//import org.springframework.security.core.userdetails.UserDetailsService;
//import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;

import java.util.List;

import org.json.JSONArray;
import org.json.JSONObject;
//import com.ccd.app.model.GameData;
import org.springframework.beans.factory.annotation.Autowired;

//import org.springframework.ui.Model;
//import org.springframework.validation.BindingResult;
//import org.springframework.web.bind.annotation.*;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;


//import com.ccd.app.gamedata.GameDataRepository;
//import com.ccd.app.model.GameData;

import com.ccd.app.gamedata.GameDataRepository;
import com.ccd.app.gamedata.PhasesRepository;

import com.ccd.app.model.User;
//


/**
 * Magages Game Data
 * @author jsuh_mac
 *
 */
@Controller	// This means that this class is a Controller
@RequestMapping(path="/game") // This means URL's start with /game (after Application path)

public class GameDataController {
	@Autowired // This means to get the bean called userRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
	private PhasesRepository PhasesRepository;
	@Autowired
	private GameDataRepository GameDataRepository;
	
	/**
	 * Simple test URL
	 * @return
	 */
	@GetMapping(path="/hello")
	public @ResponseBody String sayHello() {
		return "Hello";
	}
	/**
	 * URL to input data
	 * @param gameName Name of the game
	 * @param gameData Data of the game
	 * @return
	 */
//	@PostMapping(path="/add", consumes = "application/json") // Map ONLY POST Requests
//	public @ResponseBody String addNewGameData (@RequestBody GameDataModel gameDataModel) {
//		GameDataModel n = new GameDataModel();
//		n = gameDataModel;
//		
//		System.out.println(n.getGameName());
//		List<PhasesModel> m = n.getPhases();
//		System.out.println(m.size());
//		GameData g = new GameData();
//		g.setGameName(gameDataModel.getGameName());
//		g.setInstructions(gameDataModel.getInstructions());
//		g.setNumDecks(gameDataModel.getNumDecks());
//		g.setNumPlayers(gameDataModel.getNumPlayers());
//		g.setPlayAreaNames(gameDataModel.getPlayAreaNames());
//		g.setPlayAreaVisibility(gameDataModel.getPlayAreaVisibility());
//		g.setPointsGoal(gameDataModel.getPointsGoal());
//		g.setTotalRounds(gameDataModel.getTotalRounds());
//		GameDataRepository.save(g);
//		for (int i =0 ; i<m.size(); i++) {
//			Phases p = new Phases();
//			p.setGameData_id(g.getGameData_id());
//			
//			p.setPhaseNumber(m.get(i).getPhaseNumber());
//			p.setChosenBy(m.get(i).getChosenBy());
//			p.setComparators(m.get(i).getComparators());
//			p.setFirst(m.get(i).getFirst());
//			p.setPointGetter(m.get(i).getPointGetter());
//			p.setPointVal(m.get(i).getPointVal());
//			p.setReceiver(m.get(i).getReceiver());
//			p.setSecond(m.get(i).getSecond());
//			p.setSender(m.get(i).getSender());
//			
//			PhasesRepository.save(p);
//		}
//		return "saved";
//	}

	@PostMapping(path="/add", consumes = "application/json") // Map ONLY POST Requests
	public @ResponseBody String addNewGameData (@RequestBody GameData gameData) {
		GameData n = new GameData();
		n = gameData;
		
		System.out.println(n.getGameName());
		List<Phases> m = n.getPhases();
		System.out.println(m.size());
		GameDataRepository.save(n);
		for (int i =0 ; i<m.size(); i++) {
			Phases p = new Phases();
			p = m.get(i);
			p.setGameData(n);
			PhasesRepository.save(p);
		}
		return "saved";
	}
	/**
	 * Test URL to return all
	 * @return
	 */
	@GetMapping(path="/all")
	public @ResponseBody Iterable<GameData> getAllGameDatas() {
		// This returns a JSON or XML with the users
		return GameDataRepository.findAll();
	}

	/**
	 * URL to get the specific game by name
	 * @param gameName Specific name of the game
	 * @return
	 */


	@PostMapping(path="/get") // Map ONLY POST Requests
	public @ResponseBody GameData get (@RequestParam String gameName) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		//throws UsernameNotFoundException{
			return GameDataRepository.findBygameName(gameName);
			
		//}
	}
	

	

//	@GetMapping(path="/search/games")
//	public @ResponseBody String[] searchGames(@RequestParam String search) {
//	
	@GetMapping(path="/searchgames")		
	public @ResponseBody JSONObject searchGames(@RequestParam String search) {
		List<GameData> games = GameDataRepository.findAll();
		JSONObject result = new JSONObject();
		JSONArray ja = new JSONArray();
		
		result.put("Total", games.size());
		for(int i = 0; i < games.size(); ++i) {
			JSONObject jo = new JSONObject();
			jo.put("username", games.get(i).getGameName());
			ja.put(jo);
		}
		result.put("array", ja);
		return result;	
	}
	
	
//	@GetMapping(path="/info")
//	public @ResponseBody JSONObject getGameInformation(@RequestParam String GameName) {
//		JSONObject ja = new JSONObject();
//		GameData game = GameDataRepository.findBygameName(GameName);
//
//		int count = 0;
//		String[] arr = new String[count];
//		String[] temp = arr;
//		
//		for(int n = 0; n < count; ++n) {
//			GameData next = games.get(n);
//			String name = next.getGameName();
//			temp = arr;
//			
//			if(name.contains(search)) {
//				arr = new String[count+1];
//				for(int i = 0; i < count; ++i) {
//					arr[i] = temp[i];
//				}
//				arr[count] = name;
//				++count;
//			}
//		}
//		return arr;
//	}
//	
//	
//	@GetMapping(path="/info")
//	public @ResponseBody JSONObject getGameInformation(@RequestParam String GameName) {
//		JSONObject ja = new JSONObject();
//		GameData game = GameDataRepository.findBygameName(GameName);
//
//		
//		int count = 0;
//		String[] arr = new String[count];
//		String[] temp = arr;
//		
//		for(int n = 0; n < count; ++n) {
//			GameData next = games.get(n);
//			String name = next.getGameName();
//			temp = arr;
//			
//			if(name.contains(search)) {
//				arr = new String[count+1];
//				for(int i = 0; i < count; ++i) {
//					arr[i] = temp[i];
//				}
//				arr[count] = name;
//				++count;
//			}
//		}
//		return arr;
//	}
	
	
	@GetMapping(path="/info")
	public @ResponseBody JSONObject getGameInformation(@RequestParam String GameName) {
		JSONObject ja = new JSONObject();
		GameData game = GameDataRepository.findBygameName(GameName);
		
		ja.put("Overview", game.getOverview());
		ja.put("Rules", game.getRules());
		ja.put("Scoring", game.getScoring());
		ja.put("ExtraInfo", game.getExtraInfo());
		ja.put("NumPlayers", game.getNumPlayers());
		
		return ja;
	}
}
